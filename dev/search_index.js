var documenterSearchIndex = {"docs":
[{"location":"MeshData/#MeshData-type","page":"MeshData","title":"MeshData type","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"MeshData contains the following fields","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"K: number of elements K in the mesh.\nFToF: indexing vector for face-to-face connectivity (length of the vector is the total number of faces, e.g., N_rm faces K)\nxyz::NTuple{Dim,...}: nodal interpolation points mapped to physical elements. All elements of xyz are N_p times K matrices, where N_p are the number of nodal points on each element.\nxyzq::NTuple{Dim,...}, wJq: volume quadrature points/weights mapped to physical elements. All elements these tuples are N_q times K matrices, where N_q is the number of quadrature points on each element.\nxyzf::NTuple{Dim,...}: face quadrature points mapped to physical elements. All elements of xyz are N_f times K matrices, where N_f is the number of face points on each element.\nmapP,mapB: indexing arrays for inter-element node connectivity (mapP) and for extracting boundary nodes from the list of face nodes xyzf (mapB). mapP is a matrix of size N_f times K, while the length of mapB is the total number of nodes on the boundary.\nrstxyzJ::SMatrix{Dim,Dim}: volume geometric terms G_ij = fracpartal x_ipartial hatx_j. Each element of rstxyzJ is a matrix of size N_p times K.\nJ,sJ: volume and surface Jacobians evaluated at interpolation points and surface quadrature points, respectively. J is a matrix of size N_p times K, while sJ is a matrix of size N_f times K.\nnxyzJ::NTuple{Dim,...}: scaled outward normals evaluated at surface quadrature points. Each element of nxyzJ is a matrix of size N_ftimes K.","category":"page"},{"location":"MeshData/#Setting-up-md::MeshData","page":"MeshData","title":"Setting up md::MeshData","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"The MeshData struct contains data for high order DG methods useful for evaluating DG formulations in a matrix-free fashion.","category":"page"},{"location":"MeshData/#Generating-unstructured-meshes","page":"MeshData","title":"Generating unstructured meshes","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"For convenience, simple uniform meshes are included in with StartUpDG.jl.","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"using StartUpDG\nKx,Ky,Kz = 4,2,8\nVX,EToV = uniform_mesh(Line(),Kx)\nVX,VY,EToV = uniform_mesh(Tri(),Kx,Ky)\nVX,VY,EToV = uniform_mesh(Quad(),Kx,Ky)\nVX,VY,VZ,EToV = uniform_mesh(Hex(),Kx,Ky,Kz)","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"The uniform triangular mesh is constructed by creating a uniform quadrilateral mesh then bisecting each quad into two triangles.","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"Unstructured meshes for more complex geometries can be generated using external packages. For example, TriangleMesh.jl can be used as follows:","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"using TriangleMesh\n\npoly = polygon_Lshape()\nmesh = create_mesh(poly, set_area_max=true) # will ask for max elem size in the REPL\nVX,VY = mesh.point[1,:],mesh.point[2,:]\nEToV = permutedims(mesh.cell)","category":"page"},{"location":"MeshData/#Initializing-high-order-DG-mesh-data","page":"MeshData","title":"Initializing high order DG mesh data","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"Given unstructured mesh information (tuple of vertex coordinates VXYZ and index array EToV) high order DG mesh data can be constructed as follows:","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"md = MeshData(VXYZ...,EToV,rd)","category":"page"},{"location":"MeshData/#Enforcing-periodic-boundary-conditions","page":"MeshData","title":"Enforcing periodic boundary conditions","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"Periodic boundary conditions can be enforced by calling make_periodic, which returns another MeshData struct with modified mapP,mapB, and FToF indexing arrays which account for periodicity.","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"md = MeshData(VX,VY,EToV,rd)\nmd_periodic = make_periodic(md,rd) # periodic in both x and y coordinates\nmd_periodic_x = make_periodic(md,rd,true,false) # periodic in x direction, but not y","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"One can check which dimensions are periodic via the is_periodic field of MeshData. For example, the md_periodic_x example above gives","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"julia> md_periodic_x.is_periodic\n(true, false)","category":"page"},{"location":"MeshData/#Creating-curved-meshes","page":"MeshData","title":"Creating curved meshes","text":"","category":"section"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"It's common to generate curved meshes by first generating a linear mesh, then moving high order nodes on the linear mesh. This can be done by calling MeshData again with new x,y coordinates:","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"md = MeshData(VX,VY,EToV,rd)\n@unpack x,y = md\n# <-- code to modify high order nodes (x,y)\nmd_curved = MeshData(md,rd,x,y)","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"MeshData(md,rd,x,y) and MeshData(md,rd,x,y,z) are implemented for 2D and 3D, though this is not currently implemented in 1D.","category":"page"},{"location":"MeshData/","page":"MeshData","title":"MeshData","text":"More generally, one can create a copy of a MeshData with certain fields modified by using @set or setproperties from Setfield.jl.","category":"page"},{"location":"RefElemData/#RefElemData-type","page":"RefElemData","title":"RefElemData type","text":"","category":"section"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"RefElemData contains the following fields","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"elemShape::ElemShape: element shape. Line, Tri, Quad, Hex currently supported.\nNfaces: number of faces on a given type of reference element.\nfv: list of vertices defining faces, e.g., [1,2],[2,3],[3,1] for a triangle\nrst::NTuple{Dim,...}: tuple of vectors of length N_p, each of which contains coordinates of degree N optimized polynomial interpolation points.\nrstq::NTuple{Dim,...},wq,Vq: tuple of volume quadrature points, vector of weights, and quadrature interpolation matrix. Each element of rstq and wq are vectors of length N_q, and Vq is a matrix of size N_q times N_p.\nN_{\\rm plot}: the degree which determines the number of plotting points N_{p,{\\rm plot}}.\nrstp::NTuple{Dim,...}, Vp: tuple of plotting points and plotting interpolation matrix. Each element of rstp is a vector of length N_prm plot, and Vp is a matrix of size N_prm plot times N_p.\nrstf::NTuple{Dim,...},wf,Vf: tuple of face quadrature points, weights, and face interpolation matrix. Each element of rstf and wf are vectors of length N_f, and Vf is a matrix of size N_f times N_p.\nnrstJ::NTuple{Dim,...}: tuple of outward reference normals, scaled by face Jacobian. Each element is a vector of length N_f.\nM: mass matrix computed using quadrature. Size N_p times N_p\nPq: quadrature-based L^2 projection matrix. Size N_p times N_q.\nDrst::NTuple{Dim,...}, LIFT: differentiation and lifting matrices. Differentiation matrices are size N_p times N_p, while lift matrices are size N_ptimes N_f.","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"This list is incomplete; other fields are stored but currently only used for internal computations.","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"Mass, differentiation, lifting, and interpolation matrices specialize on the type of matrix. For example, these matrices are dense Matrix{T} type for lines and triangles, but are stored as sparse matrices for quadrilaterals and hexahedra.","category":"page"},{"location":"RefElemData/#Setting-up-rd::RefElemData","page":"RefElemData","title":"Setting up rd::RefElemData","text":"","category":"section"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"The struct rd::RefElemData contains data for a given element type. Currently, four types of reference elements are supported: Line, Tri, Quad, and Hex.","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"To initalize a RefElemData, just specify the element type and polynomial degree.","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"N = 3\nrd = RefElemData(Line(),N)\nrd = RefElemData(Tri(),N)\nrd = RefElemData(Quad(),N)\nrd = RefElemData(Hex(),N)","category":"page"},{"location":"RefElemData/#Specifying-different-quadrature-rules.","page":"RefElemData","title":"Specifying different quadrature rules.","text":"","category":"section"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"By default, RefElemData initializes volume and surface quadrature rules to be the minimum rules which exactly integrate the unweighted volume and surface mass matrices. If different quadrature rules are desired, they can be specified as follows:","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"N = 3\n\n# create degree N tensor product Gauss-Lobatto rule\nr1D,w1D = gauss_lobatto_quad(0,0,N)\nrq,sq = vec.(StartUpDG.meshgrid(r1D))\nwr,ws = vec.(StartUpDG.meshgrid(w1D))\nwq = @. wr*ws\n\nrd = RefElemData(Quad(),N; quad_rule_vol =(rq,sq,wq),  \n                           quad_rule_face=(r1D,w1D))","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"This results in a DG spectral element method (DG-SEM) discretization, with a diagonal lumped mass matrix and differentiation matrices which satisfy a summation-by-parts property.","category":"page"},{"location":"RefElemData/","page":"RefElemData","title":"RefElemData","text":"By default, RefElemData is constructed for a nodal basis (in order to facilitate curved meshes, connectivity, etc). There is not functionality to change interpolation nodes, since these transformations can be performed as algebraic changes of basis after setting up a RefElemData. ","category":"page"},{"location":"fieldaliases/#Fieldname-aliases","page":"Fieldname aliases","title":"Fieldname aliases","text":"","category":"section"},{"location":"fieldaliases/","page":"Fieldname aliases","title":"Fieldname aliases","text":"Base.getproperty is overloaded for both RefElemData and MeshData, so you can reference rd.Dr instead of md.Drst[1] or md.rxJ instead of md.rstxyzJ[1,1]. @unpack also works with aliased fieldnames.","category":"page"},{"location":"fieldaliases/","page":"Fieldname aliases","title":"Fieldname aliases","text":"The aliases for RefElemData are below:","category":"page"},{"location":"fieldaliases/","page":"Fieldname aliases","title":"Fieldname aliases","text":"r for rst[1] (similarly for s and t)\nrq for rstq[1] (similarly for sq and tq)\nrf for rstf[1] (similarly for sf and tf)\nrp for rstp[1] (similarly for sp and tp)\nDr for Drst[1] (similarly for Ds and Dt)\nNfaces, Np, Nq, Nfq for number of faces, volume nodes, quadrature points, and face quadrature points. ","category":"page"},{"location":"fieldaliases/","page":"Fieldname aliases","title":"Fieldname aliases","text":"The aliases for MeshData are below:","category":"page"},{"location":"fieldaliases/","page":"Fieldname aliases","title":"Fieldname aliases","text":"VX for VXYZ[1] (similarly for VY, VZ)\nx for xyz[1] (similarly for y, z)\nxf for xyzf[1] (similarly for yf, zf)\nxq for xyzq[1] (similarly for yq, zq)\nnxJ for nxyzJ[1] (similarly for nyJ, nzJ)\nrxJ, sxJ for rstxyzJ[1,1],rstxyzJ[1,2] (similarly for txJ,ryJ,syJ,tyJ,rzJ,szJ,tzJ)","category":"page"},{"location":"index_refs/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"index_refs/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"index_refs/#Functions","page":"Reference","title":"Functions","text":"","category":"section"},{"location":"index_refs/","page":"Reference","title":"Reference","text":"Modules = [StartUpDG]","category":"page"},{"location":"index_refs/#StartUpDG.MeshData","page":"Reference","title":"StartUpDG.MeshData","text":"struct MeshData{Dim, Tv}\n\nMeshData: contains info for a high order piecewise polynomial discretization on an unstructured mesh. \n\nUse @unpack to extract fields. Example:\n\nN,K1D = 3,2\nrd = RefElemData(Tri(),N)\nVX,VY,EToV = uniform_mesh(Tri(),K1D)\nmd = MeshElemData(VX,VY,EToV,rd)\n@unpack x,y = md\n\n\n\n\n\n","category":"type"},{"location":"index_refs/#StartUpDG.PIparams","page":"Reference","title":"StartUpDG.PIparams","text":"struct PIparams\n\nStruct containing PI controller parameters.\n\n\n\n\n\n","category":"type"},{"location":"index_refs/#StartUpDG.RefElemData","page":"Reference","title":"StartUpDG.RefElemData","text":"struct RefElemData{Dim, ElemShape <: AbstractElemShape, Nfaces, Tv}\n\nRefElemData: contains info (interpolation points, volume/face quadrature, operators) for a high order nodal polynomial basis on a given reference element.\n\nUse @unpack to extract fields. Example:\n\nN = 3\nrd = RefElemData(Tri(),N)\n@unpack r,s = rd\n\n\n\n\n\n","category":"type"},{"location":"index_refs/#StartUpDG.RefElemData-Tuple{Any}","page":"Reference","title":"StartUpDG.RefElemData","text":"RefElemData(elem::Line, N;\n            quad_rule_vol = quad_nodes(elem,N+1))\nRefElemData(elem::Union{Tri,Quad}, N;\n             quad_rule_vol = quad_nodes(elem,N),\n             quad_rule_face = gauss_quad(0,0,N))\nRefElemData(elem::Hex,N;\n             quad_rule_vol = quad_nodes(elem,N),\n             quad_rule_face = quad_nodes(Quad(),N))\nRefElemData(elem; N, kwargs...) # version with keyword arg\n\nConstructor for RefElemData for different element types.\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.bcopy!-Tuple{Any, Any}","page":"Reference","title":"StartUpDG.bcopy!","text":"bcopy!(x,y) = x .= y\n\nConvenience routine for operations on tuples of arrays.\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.ck45-Tuple{}","page":"Reference","title":"StartUpDG.ck45","text":"ck45()\n\nReturns coefficients rka,rkb,rkc for the 4th order 5-stage low storage Carpenter/Kennedy Runge Kutta method. Coefficients evolve the residual, solution, and local time, e.g.,\n\nExample\n\nres = rk4a[i]*res + dt*rhs # i = RK stage\n@. u += rk4b[i]*res\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.compute_adaptive_dt","page":"Reference","title":"StartUpDG.compute_adaptive_dt","text":"compute_adaptive_dt(Q,rhsQrk,dt,rkE,PI::PIparams,prevErrEst=nothing)\n\nreturns acceptstep (true/false), dtnew, errEst. uses PI error control method copied from Paranumal library (Warburton et al).\n\nInputs:\n\nQ: container of arrays, Q[i] = ith solution field\nrhsQrk: container whose entries are type(Q) for RK rhs evaluations\n\n\n\n\n\n","category":"function"},{"location":"index_refs/#StartUpDG.connect_mesh-Tuple{Any, Any}","page":"Reference","title":"StartUpDG.connect_mesh","text":"connect_mesh(EToV,fv)\n\nInitialize element connectivity matrices, element to element and element to face connectivity.\n\nInputs:\n\nEToV is a K by Nv matrix whose rows identify the Nv vertices\n\nwhich make up an element.\n\nfv (an array of arrays containing unordered indices of face vertices).\n\nOutput: FToF, length(fv) by K index array containing face-to-face connectivity.\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.dp56-Tuple{}","page":"Reference","title":"StartUpDG.dp56","text":"dp56()\n\nDormand-prince 5th order 7 stage Runge-Kutta method (6 function evals via the FSAL property) Returns Butcher table arrays A,c and error evolution coefficients rkE.\n\nNote there is no b array needed due to the FSAL property and because the last stage is used to compute the error estimator.\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.make_periodic-Tuple{MeshData, RefElemData, Vararg{Any, N} where N}","page":"Reference","title":"StartUpDG.make_periodic","text":"make_periodic(md::MeshData{Dim},rd::RefElemData,is_periodic...) where {Dim}\nmake_periodic(md::MeshData{Dim},rd::RefElemData,is_periodic=ntuple(x->true,Dim)) where {Dim}\nmake_periodic(md::MeshData{1},rd::RefElemData,is_periodic=true)\n\nReturns new MeshData such that the node maps mapP and face maps FToF are now periodic. Here, is_periodic is a tuple of Bool indicating whether or not to impose periodic BCs in the x,y, or z coordinate.\n\n\n\n\n\n","category":"method"},{"location":"index_refs/#StartUpDG.readGmsh2D-Tuple{Any}","page":"Reference","title":"StartUpDG.readGmsh2D","text":"function readGmsh2D(filename)\n\nreads triangular GMSH 2D file format 2.2 0 8. returns VX,VY,EToV\n\nExamples\n\nVXY,EToV = readGmsh2D(\"eulerSquareCylinder2D.msh\")\n\n\n\n\n\n","category":"method"},{"location":"tstep_usage/#Time-stepping","page":"Timestepping","title":"Time-stepping","text":"","category":"section"},{"location":"tstep_usage/","page":"Timestepping","title":"Timestepping","text":"For convenience, we include utilities for two explicit Runge-Kutta schemes. For more advanced time-stepping functionality, we recommend DifferentialEquations.jl.","category":"page"},{"location":"tstep_usage/#Carpenter-and-Kennedy's-(4,5)-method","page":"Timestepping","title":"Carpenter and Kennedy's (4,5) method","text":"","category":"section"},{"location":"tstep_usage/","page":"Timestepping","title":"Timestepping","text":"ck45() returns coefficients for a low-storage Runge-Kutta method.","category":"page"},{"location":"tstep_usage/#Example-usage:","page":"Timestepping","title":"Example usage:","text":"","category":"section"},{"location":"tstep_usage/","page":"Timestepping","title":"Timestepping","text":"using Plots\nusing StartUpDG\n\n# Brusselator\nB = 3\nf(y1,y2) = [1+y1^2*y2-(B+1)*y1, B*y1-y1^2*y2]\nf(Q) = f(Q[1],Q[2])\np,q = 1.5, 3.0\nQ = [p;q]\n\ndt = .1\nFinalTime = 20\n\nres = zero.(Q) # init RK residual\nrk4a,rk4b,rk4c = ck45()\nNsteps = ceil(FinalTime/dt)\ndt = FinalTime/Nsteps\n\nplot() # init plot\nfor i = 1:Nsteps\n    global res # yes, I know...this is just for simplicty\n    for INTRK=1:5\n        rhsQ = f(Q)\n        @. res = rk4a[INTRK]*res + dt*rhsQ # i = RK stage\n        @. Q =  Q + rk4b[INTRK]*res\n    end\n    scatter!([i*dt;i*dt],Q)\nend\ndisplay(plot!(leg=false))","category":"page"},{"location":"tstep_usage/#Dormand-Prince-(5,6)-with-PI-error-control","page":"Timestepping","title":"Dormand-Prince (5,6) with PI error control","text":"","category":"section"},{"location":"tstep_usage/","page":"Timestepping","title":"Timestepping","text":"dp56() returns coefficients for an embedded Runge-Kutta method.","category":"page"},{"location":"tstep_usage/#Example-usage:-2","page":"Timestepping","title":"Example usage:","text":"","category":"section"},{"location":"tstep_usage/","page":"Timestepping","title":"Timestepping","text":"using Plots\nusing StartUpDG\n\n# Brusselator\nB = 3\nf(y1,y2) = [1+y1^2*y2-(B+1)*y1, B*y1-y1^2*y2]\nf(Q) = f(Q[1],Q[2])\np,q = 1.5, 3.0\nQ = [p;q]\n\ndt = .01\nFinalTime = 20\n\nrka,rkE,rkc = dp56()\nPI = PIparams(order=5,errTol=1e-6)\n\nQtmp = copy(Q) # temp storage for RK stage vecs y_i\nrhsQrk = (f(Q),ntuple(x->zero(Q),length(rkE)-1)...) # RK f(y_i), set first elem (FSAL)\nprevErrEst = nothing\nt = 0.0\n\nplot()\nwhile t < FinalTime\n    global Q,rhsQrk,t,dt,prevErrEst\n    for INTRK = 2:7\n        fill!(Qtmp,zero(eltype(first(Q))))\n        for s = 1:INTRK-1\n            @. Qtmp = Qtmp + rka[INTRK,s]*rhsQrk[s]\n        end\n        @. Qtmp = Q + dt*Qtmp\n        rhsQrk[INTRK] .= f(Qtmp)\n    end\n    # Hairer seminorm error estimator\n    errEstVec = sum(rkE.*rhsQrk) ./ (PI.errTol * (@. 1 + abs(Q)))\n    errEst    = mapreduce(x->x*x,+,errEstVec) / sum(length.(Q))\n\n    accept_step,dtnew,prevErrEst = compute_adaptive_dt(errEst,dt,PI,prevErrEst)\n    if accept_step\n        t += dt\n        @. Q = Qtmp\n        @. rhsQrk[1] = rhsQrk[7] # use FSAL property\n\n        scatter!([t;t],Q)\n    end\n    dt = min(FinalTime-t,dtnew)\nend\ndisplay(plot!(leg=false))","category":"page"},{"location":"ex_dg_deriv/#Example:-approximating-derivatives-using-DG","page":"Example: computing DG derivatives","title":"Example: approximating derivatives using DG","text":"","category":"section"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"MeshData can be used to compute DG derivatives. Suppose f is a differentiable function and the domain Omega can be decomposed into non-overlapping elements D^k. The approximation of fracpartial fpartial x can be approximated using the following formulation: find piecewise polynomial u such that for all piecewise polynomials v","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"int_Omega u v = sum_k left( int_D^k fracpartial upartial xv + int_partial D^k frac12 lefturightn_x v right)","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"Here, lefturight = u^+ - u denotes the jump across an element interface, and n_x is the x-component of the outward unit normal on D^k.","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"Discretizing the left-hand side of this formulation yields a mass matrix. Inverting this mass matrix to the right hand side yields the DG derivative. We show how to compute it for a uniform triangular mesh using MeshData and StartUpDG.jl.","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"We first construct the triangular mesh and initialize md::MeshData.","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"using StartUpDG\nusing Plots\n\nN = 3\nK1D = 8\nrd = RefElemData(Tri(),N)\nVX,VY,EToV = uniform_mesh(Tri(),K1D)\nmd = MeshData(VX,VY,EToV,rd)","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"We can approximate a function f(xy) using interpolation","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"f(x,y) = exp(-5*(x^2+y^2))*sin(1+pi*x)*sin(2+pi*y)\n@unpack x,y = md\nu = @. f(x,y)","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"or using quadrature-based projection","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"@unpack Pq = rd\n@unpack x,y,xq,yq = md\nu = Pq*f.(xq,yq)","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"We can use scatter in Plots.jl to quickly visualize the approximation. This is not intended to create a high quality image (see other libraries, e.g., Makie.jl,VTK.jl, or Triplot.jl for publication-quality images).","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"@unpack Vp = rd\nxp,yp,up = Vp*x,Vp*y,Vp*u # interp to plotting points\nscatter(xp,yp,uxp,zcolor=uxp,msw=0,leg=false,ratio=1,cam=(0,90))","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"Both interpolation and projection create a matrix u of size N_p times K which contains coefficients (nodal values) of the DG polynomial approximation to f(xy). We can approximate the derivative of f(xy) using the DG derivative formulation","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"function dg_deriv_x(u,md::MeshData,rd::RefElemData)\n  @unpack Vf,Dr,Ds,LIFT = rd\n  @unpack rxJ,sxJ,J,nxJ,mapP = md\n  uf = Vf*u\n  ujump = uf[mapP]-uf\n\n  # derivatives using chain rule + lifted flux terms\n  ux = rxJ.*(Dr*u) + sxJ.*(Ds*u)  \n  dudxJ = ux + LIFT*(.5*ujump.*nxJ)\n\n  return dudxJ./J\nend","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"We can visualize the result as follows:","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"dudx = dg_deriv_x(u,md,rd)\nuxp = Vp*dudx\nscatter(xp,yp,uxp,zcolor=uxp,msw=0,leg=false,ratio=1,cam=(0,90))","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"Plots of the polynomial approximation u(xy) and the DG approximation of fracpartial upartial x are given below","category":"page"},{"location":"ex_dg_deriv/","page":"Example: computing DG derivatives","title":"Example: computing DG derivatives","text":"(Image: u) (Image: dudx)  ⠀","category":"page"},{"location":"authors/#Authors","page":"Authors","title":"Authors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"The original port from Matlab to Julia was done by Yimin Lin. Subsequent development was done by Jesse Chan.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains routines to initialize reference element operators, physical mesh arrays, and connectivities for nodal DG methods. Codes roughly based on Nodal Discontinuous Galerkin Methods by Hesthaven and Warburton (2007).","category":"page"},{"location":"","page":"Home","title":"Home","text":"StartUpDG.jl exports structs RefElemData{Dim,ElemShape,...} and MeshData{Dim} which contain data useful for evaluating DG formulations in a matrix-free fashion. These structs contain fields similar to those in Globals1D, Globals2D, Globals3D in the NDG book codes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fields can be unpacked from rd::RefElemData and md::MeshData using @unpack.","category":"page"},{"location":"#A-short-example","page":"Home","title":"A short example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using StartUpDG\nusing UnPack\n\n# polynomial degree and mesh size\nN = 3\nK1D = 8\n\n# init ref element and mesh\nrd = RefElemData(Tri(),N)\nVX,VY,EToV = uniform_mesh(Tri(),K1D)\nmd = MeshData(VX,VY,EToV,rd)\n\n# Define a function by interpolation\n@unpack x,y = md\nu = @. exp(-10*(x^2+y^2))\n\n# Compute derivatives using geometric mapping + chain rule\n@unpack Dr,Ds = rd\n@unpack rxJ,sxJ,J = md\ndudx = (rxJ.*(Dr*u) + sxJ.*(Ds*u))./J","category":"page"}]
}
